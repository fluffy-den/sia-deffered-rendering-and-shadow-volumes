include(CheckCXXCompilerFlag)

# Set a default build configuration (Release)
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  message(STATUS "Setting build type to 'Release' as none was specified.")
  set(CMAKE_BUILD_TYPE Release CACHE STRING "Choose the type of build." FORCE)
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Debug" "Release"
    "MinSizeRel" "RelWithDebInfo")
endif()
string(TOUPPER "${CMAKE_BUILD_TYPE}" U_CMAKE_BUILD_TYPE)

# Enable folders for projects in Visual Studio
if (CMAKE_GENERATOR MATCHES "Visual Studio")
  set_property(GLOBAL PROPERTY USE_FOLDERS ON)
endif()

if (APPLE)
  set(CMAKE_MACOSX_RPATH ON)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DGL_SILENCE_DEPRECATION=1")
endif()


if (CMAKE_CXX_COMPILER_ID MATCHES "Clang" OR CMAKE_CXX_COMPILER_ID MATCHES "GNU")
  CHECK_CXX_COMPILER_FLAG("-std=c++14" HAS_CPP14_FLAG)
  if (HAS_CPP14_FLAG)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14")  
  else()
    message(FATAL_ERROR "Unsupported compiler -- requires C++14 support!")
  endif()

  # Prefer libc++ in conjunction with Clang
  if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    CHECK_CXX_COMPILER_FLAG("-stdlib=libc++" HAS_LIBCPP)
    if (HAS_LIBCPP)
      set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++ -D_LIBCPP_VERSION")
      set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -stdlib=libc++")
      set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -stdlib=libc++")
      message(STATUS "Using libc++.")
    else()
      message(WARNING "libc++ is recommended in conjunction with clang. Please insteall the libc++ development headers, provided e.g. by the packages 'libc++-dev' and 'libc++abi-dev' on Debian/Ubuntu.")
    endif()
  endif()

  # Enable link time optimization and set the default symbol
  # visibility to hidden (very important to obtain small binaries)
  if (NOT ${U_CMAKE_BUILD_TYPE} MATCHES DEBUG)
    # Default symbol visibility
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fvisibility=hidden")
  endif()

  # Disable specific GCC 7 warnings
  if (CMAKE_COMPILER_IS_GNUCC AND CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 7.0)
      set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-deprecated-declarations -Wno-misleading-indentation -Wformat-truncation=0 -Wno-int-in-bool-context -Wimplicit-fallthrough=0")
  endif()
endif()

# GLFW
set(GLFW_BUILD_EXAMPLES OFF CACHE BOOL "")
set(GLFW_BUILD_TESTS    OFF CACHE BOOL "")
set(GLFW_BUILD_DOCS     OFF CACHE BOOL "")
set(GLFW_INSTALL        OFF CACHE BOOL "")
add_subdirectory(pmp-library/external/glfw-3.4)

# GLBINDING
set(BUILD_SHARED_LIBS     OFF CACHE BOOL "")
set(OPTION_BUILD_TOOLS    OFF CACHE BOOL "")
set(OPTION_BUILD_EXAMPLES OFF CACHE BOOL "")
add_subdirectory(glbinding)

# SOIL2
add_subdirectory(SOIL2)

# pmp-library
set(PMP_BUILD_APPS     OFF CACHE BOOL "")
set(PMP_BUILD_EXAMPLES OFF CACHE BOOL "")
set(PMP_BUILD_TESTS    OFF CACHE BOOL "")
set(PMP_BUILD_DOCS     OFF CACHE BOOL "")
set(PMP_BUILD_VIS      OFF CACHE BOOL "")
set(PMP_INSTALL        OFF CACHE BOOL "")
add_subdirectory(pmp-library)

# Dear Imgui
file(GLOB IMGUI_SOURCE_FILES
    ${CMAKE_CURRENT_SOURCE_DIR}/pmp-library/external/imgui-1.91.8/*.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/pmp-library/external/imgui-1.91.8/imgui_impl_glfw.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/pmp-library/external/imgui-1.91.8/imgui_impl_opengl3.cpp
)
set(IMGUI_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/pmp-library/external/imgui-1.91.8/)

set(GLFW_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/pmp-library/external/glfw-3.4/include)
set(GLBINDING_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/glbinding/source/glbinding/include)
set(GLBINDING_AUX_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/glbinding/source/glbinding-aux/include)
set(EIGEN_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/pmp-library/external/eigen-3.4.0)
set(PMP_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/pmp-library/src/)
set(SOIL_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/SOIL2/src/SOIL2/)

set(CompilerFlags
  CMAKE_MACOSX_RPATH
  GLFW_INCLUDE_DIR
  GLBINDING_INCLUDE_DIR GLBINDING_AUX_INCLUDE_DIR
  EIGEN_INCLUDE_DIR
  PMP_INCLUDE_DIR
  SOIL_INCLUDE_DIR
  IMGUI_INCLUDE_DIR IMGUI_SOURCE_FILES
)
foreach(CompilerFlag ${CompilerFlags})
  set(${CompilerFlag} "${${CompilerFlag}}" PARENT_SCOPE)
endforeach()